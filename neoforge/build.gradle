// neoforge/build.gradle
plugins {
    id("com.gradleup.shadow")
}

architectury {
    platformSetupLoomIde()
    neoForge()
}

/* ────────────────────────────────────────────────
   Configurations
   ─────────────────────────────────────────────── */
configurations {
    common { canBeResolved = true; canBeConsumed = false }
    shadowBundle { canBeResolved = true; canBeConsumed = false }
    compileClasspath.extendsFrom(common)
    runtimeClasspath.extendsFrom(common)
    developmentNeoForge.extendsFrom(common)
}

/* ────────────────────────────────────────────────
   Repositories
   ─────────────────────────────────────────────── */
repositories {
    maven { name = "NeoForged";     url = "https://maven.neoforged.net/releases" }
    maven { name = "CurseMaven";    url = "https://cursemaven.com" }
}

/* ────────────────────────────────────────────────
   Dependencies
   ─────────────────────────────────────────────── */
dependencies {
    // Core
    neoForge "net.neoforged:neoforge:$rootProject.neoforge_version"
    modImplementation "dev.architectury:architectury-neoforge:$rootProject.architectury_api_version"

    // --- Kotlin for Forge (from local JARs) ---
    // All must be 'implementation' to be on the compile and runtime classpath.
    implementation files(rootProject.file("libs/kfflang-5.8.0.jar"))
    implementation files(rootProject.file("libs/kffmod-5.8.0.jar"))
    implementation files(rootProject.file("libs/kfflib-5.8.0.jar")) // Changed from runtimeOnly

    // Other mods
    modImplementation "software.bernie.geckolib:geckolib-neoforge-$rootProject.minecraft_version:$rootProject.geckolib_version"
    modImplementation "me.fzzyhmstrs:fzzy_config:$rootProject.fzzyConfigVersion_neoforge"
    modImplementation "curse.maven:jade-324717:6155158"

    // Common module
    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowBundle project(path: ":common", configuration: "transformProductionNeoForge")
}

/* ────────────────────────────────────────────────
   Resource processing & Jar tasks (unchanged)
   ─────────────────────────────────────────────── */
processResources {
    inputs.property("version", project.version)
    filesMatching("META-INF/neoforge.mods.toml") { expand("version": project.version) }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = "dev-shadow"
}

remapJar {
    inputFile.set(shadowJar.archiveFile)
    dependsOn(shadowJar)
}
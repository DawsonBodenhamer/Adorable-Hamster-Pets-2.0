plugins {
    id 'com.gradleup.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"
    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"
    // Architectury API for Fabric
    modImplementation "dev.architectury:architectury-fabric:$rootProject.architectury_api_version"

    // Your Project Dependencies (Fabric Versions)
    modImplementation "software.bernie.geckolib:geckolib-fabric-$rootProject.minecraft_version:$rootProject.geckolib_version"
    modImplementation "me.fzzyhmstrs:fzzy_config:$rootProject.fzzyConfigVersion_fabric"
    modImplementation "com.terraformersmc:modmenu:$rootProject.modmenu_version"
    modImplementation "curse.maven:jade-324717:6291536" // Jade for Fabric

    // Common module dependency
    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
}